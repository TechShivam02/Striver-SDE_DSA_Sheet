
#include <iostream>
#include <vector>

using namespace std;

int fibborec(int n){
    if(n<=1){
        return n;
    }
    
    return fibborec(n-1)+fibborec(n-2);
}



int fibboMemo(int n , vector<int> &dp)
{
    if(n <= 1){
        return n;
    }
    
    
    if(dp[n] != -1){
        return dp[n];
    }
    
    int ans = fibboMemo(n-1 , dp) + fibboMemo(n-2,dp);
    
    dp[n] = ans;
    
    return ans;
    
}



int fibbotable(int n){
  
   vector<int> dp(n+1,-1);
   
   dp[0]=0;
   dp[1]=1;
   
   for(int i=2;i<=n;i++){
       dp[i] = dp[i-1]+dp[i-2];
   }
   
   return dp[n];
 
}





int main()
{
    
    int n;
    cin>>n;
    
    
    
    cout<<"Recursion : "<<fibborec(n)<<endl;
    
    
    
    // memorization     time O(n)   space : O(n) + O(n)  ==>   O(n)
     
    vector<int> dp(n+1,-1);
    
    cout<<"Memorization  : " << fibboMemo(n,dp)<<endl;
    
    
    
    
    
    // Tabulation     time O(n)   space : O(n)
     
    cout<<"Tabulation : "<<fibbotable(n)<<endl;
    
    
    
    //   time : o(n)  spacce : O(1)
    
    
    int prev2=0;
    int prev1=1;
    
    int curr=prev2+prev1;
    
    for(int i=2;i<=n;i++){
        curr = prev2+prev1;
        
        prev2 = prev1;
        prev1 = curr;
        
    }
    
    cout<<endl<<"MostOPtimal , Fibbo of "<<n<<" : "<<curr<<endl;
    

    

    return 0;
}