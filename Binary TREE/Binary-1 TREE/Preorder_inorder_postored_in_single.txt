
vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    
    
    vector< vector<int> >  ans;
    
    
    if(root == NULL){
        return ans;
    }
    
    vector<int> inorder;
    vector<int> preorder;
    vector<int> postorder;
    
    
    stack< pair< BinaryTreeNode<int>*,int> > st;
    
    st.push(make_pair(root,1));
    
    while(!st.empty())
    {
 
        pair<BinaryTreeNode<int>*,int> temp = st.top();
        st.pop();
        
        
        BinaryTreeNode<int>* node = temp.first;
        int num = temp.second;
        
        if(num == 1){
            
            preorder.push_back(node->data);
            
            temp.second++;
            
            st.push(temp);
            
            if(node->left){
                 st.push(make_pair(node->left , 1));       
            }
           
        }
        
        
        else if(temp.second == 2){
            
            inorder.push_back(node->data);
            
            temp.second++;
            
            st.push(temp);
            
            
            if(node->right){
                 st.push(make_pair(node->right , 1));       
            }
        }
        
        else{
            postorder.push_back(node->data);
        }
        
    }
    
    ans.push_back(inorder);
    ans.push_back(preorder);
    ans.push_back(postorder);
    
    return ans;
    
    
    
    
    
    
}